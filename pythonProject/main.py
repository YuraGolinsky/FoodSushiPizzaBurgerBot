import json
import telebot
from telebot import types
import os
import uuid
from datetime import datetime

TOKEN = '7003412387:AAGep760TdROsn2X6ZNA58poYzym6UEzZMI'
bot = telebot.TeleBot(TOKEN)

MENU_FILE = 'menu.json'
ORDERS_FILE = 'orders.json'
REVIEWS_FILE = 'reviews.json'
USERS_FILE = 'users.json'

DELIVERY_COST = 50

def load_json(file_path):
    if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
        return {}
    with open(file_path, 'r', encoding='utf-8') as file:
        return json.load(file)

def save_json(data, file_path):
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

menu = load_json(MENU_FILE)
orders = load_json(ORDERS_FILE)
reviews = load_json(REVIEWS_FILE)
users = load_json(USERS_FILE)

def save_orders():
    save_json(orders, ORDERS_FILE)

def save_reviews():
    save_json(reviews, REVIEWS_FILE)

def save_users():
    save_json(users, USERS_FILE)

def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üçΩ –ú–µ–Ω—é"), types.KeyboardButton("üìã –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    keyboard.add(types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å"), types.KeyboardButton("üìú –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"))
    return keyboard



def create_category_keyboard():
    categories = set(dish_info['–∫–∞—Ç–µ–≥–æ—Ä—ñ—è'] for dish_info in menu.values())
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for category in categories:
        keyboard.add(types.KeyboardButton(category))
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_menu_keyboard(category):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for dish_name, dish_info in menu.items():
        if dish_info['–∫–∞—Ç–µ–≥–æ—Ä—ñ—è'] == category:
            keyboard.add(types.KeyboardButton(f"{dish_info['ID']} - {dish_name}"))
    keyboard.add(types.KeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_order_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

def create_main_menu_button():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    return keyboard

def create_back_button():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_message = "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    bot.send_message(message.chat.id, welcome_message, reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üçΩ –ú–µ–Ω—é")
def show_categories(message):
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=create_category_keyboard())

@bot.message_handler(func=lambda message: message.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def send_main_menu(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    send_main_menu(message)

@bot.message_handler(func=lambda message: message.text in set(dish_info['–∫–∞—Ç–µ–≥–æ—Ä—ñ—è'] for dish_info in menu.values()))
def show_menu(message):
    category = message.text
    bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}:", reply_markup=create_menu_keyboard(category))

@bot.message_handler(func=lambda message: any(str(dish_info['ID']) in message.text for dish_info in menu.values()))
def send_menu(message):
    dish_id = int(message.text.split(' ')[0])
    dish = next(dish_name for dish_name, dish_info in menu.items() if dish_info['ID'] == dish_id)
    dish_info = menu[dish]
    photo = dish_info['—Ñ–æ—Ç–æ']
    description = dish_info['–æ–ø–∏—Å']
    price = dish_info['—Ü—ñ–Ω–∞']

    msg = f"{description}\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n\n–°–∫—ñ–ª—å–∫–∏ –ø–æ—Ä—Ü—ñ–π –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?"
    bot.send_photo(message.chat.id, photo, caption=msg)

    if message.chat.id not in orders:
        orders[message.chat.id] = {'order': {}, 'details': {'status': '–ù–æ–≤–∏–π'}}

    orders[message.chat.id]['details']['current_dish'] = dish
    bot.register_next_step_handler(message, process_quantity)

def process_quantity(message):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            bot.send_message(message.chat.id, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
            return
        dish = orders[message.chat.id]['details'].get('current_dish')
        if dish is None:
            bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            return
        if message.chat.id not in orders:
            orders[message.chat.id] = {'order': {}, 'details': {'status': '–ù–æ–≤–∏–π'}}
        if dish in orders[message.chat.id]['order']:
            orders[message.chat.id]['order'][dish] += quantity
        else:
            orders[message.chat.id]['order'][dish] = quantity
        save_orders()
        bot.send_message(message.chat.id, f"–í–∏ –∑–∞–º–æ–≤–∏–ª–∏ {quantity} –ø–æ—Ä—Ü—ñ–π {dish}.")

        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞–º —Å–º–∞–∫—É—î:", reply_markup=create_order_keyboard())
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "üõí –ó–∞–º–æ–≤–∏—Ç–∏")
def request_order(message):
    if message.chat.id not in orders or not orders[message.chat.id]['order']:
        bot.reply_to(message, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è. –û–±–µ—Ä—ñ—Ç—å —â–æ—Å—å –∑ –º–µ–Ω—é.")
        return

    # Generate a unique order ID
    order_id = str(uuid.uuid4().hex)
    orders[message.chat.id]['details']['order_id'] = order_id

    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
    bot.register_next_step_handler(message, process_name)

def process_name(message):
    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, process_name)
        return
    orders[message.chat.id]['details']['name'] = name
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (12 —Ü–∏—Ñ—Ä):")
    bot.register_next_step_handler(message, process_phone)

def process_phone(message):
    phone = message.text.strip()
    if not phone.isdigit() or len(phone) != 12:
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 12 —Ü–∏—Ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, process_phone)
        return
    orders[message.chat.id]['details']['phone'] = phone
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:")
    bot.register_next_step_handler(message, process_address)

def process_address(message):
    address = message.text.strip()
    if not address:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, process_address)
        return
    orders[message.chat.id]['details']['address'] = address
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 17:30):")
    bot.register_next_step_handler(message, process_ready_time)

def process_ready_time(message):
    ready_time = message.text.strip()
    orders[message.chat.id]['details']['ready_time'] = ready_time
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 18:00):")

    bot.register_next_step_handler(message, process_delivery_time)

@bot.message_handler(func=lambda message: message.text == "üìú –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")
def show_instructions(message):
    instructions_text = "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º:\n\n" \
                        "1. –û–±–µ—Ä—ñ—Ç—å 'üçΩ –ú–µ–Ω—é', —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç—Ä–∞–≤–∏.\n" \
                        "2. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç—Ä–∞–≤–∏ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —É—Å–µ –º–µ–Ω—é.\n" \
                        "3. –û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É –∑ –º–µ–Ω—é —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π.\n" \
                        "4. –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç—Ä–∞–≤ —É –∫–æ—à–∏–∫, –æ–±–µ—Ä—ñ—Ç—å 'üõí –ó–∞–º–æ–≤–∏—Ç–∏'.\n" \
                        "5. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ü–Ü–ë, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∞–¥—Ä–µ—Å–∞, —á–∞—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏).\n" \
                        "6. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n" \
                        "7. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é 'üìã –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'.\n" \
                        "8. –ó–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /leave_review.\n" \
                        "9. –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'."
    bot.send_message(message.chat.id, instructions_text)
    bot.send_message(message.chat.id, "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.",
                     reply_markup=create_main_menu_button())

def process_delivery_time(message):
    delivery_time = message.text.strip()
    orders[message.chat.id]['details']['delivery_time'] = delivery_time
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.")
    confirm_order(message)

def confirm_order(message):
    order_id = orders[message.chat.id]['details']['order_id']
    order_details = orders[message.chat.id]['order']
    total_price = sum(menu[dish]['—Ü—ñ–Ω–∞'] * quantity for dish, quantity in order_details.items())
    total_price += DELIVERY_COST

    order_summary = "\n".join([f"{dish}: {quantity} –ø–æ—Ä—Ü—ñ–π" for dish, quantity in order_details.items()])
    confirmation_message = (
        f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{order_summary}\n\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {total_price} –≥—Ä–Ω. (–≤–∫–ª—é—á–∞—é—á–∏ –¥–æ—Å—Ç–∞–≤–∫—É {DELIVERY_COST} –≥—Ä–Ω.)\n\n"
        f"–í–∞—à—ñ –¥–∞–Ω—ñ:\n–ü–Ü–ë: {orders[message.chat.id]['details']['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {orders[message.chat.id]['details']['phone']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {orders[message.chat.id]['details']['address']}\n"
        f"–ß–∞—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ: {orders[message.chat.id]['details']['ready_time']}\n"
        f"–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {orders[message.chat.id]['details']['delivery_time']}\n"
        f"–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {'–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'}\n"
        f"ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
    )

    markup = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order")
    cancel_button = types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")

    back_to_main_menu_button = types.InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(confirm_button, cancel_button, back_to_main_menu_button)

    bot.send_message(message.chat.id, confirmation_message, reply_markup=markup)

@bot.callback_query_handler(
    func=lambda call: call.data in ["confirm_order", "cancel_order", "view_status", "main_menu"])
def handle_callback(call):
    if call.data == "confirm_order":
        orders[call.message.chat.id]['details']['status'] = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
        save_orders()
        bot.send_message(call.message.chat.id,
                         "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–µ! –ú–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.")
        bot.send_message(call.message.chat.id, "–ß–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≤–∏ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –í–≤–µ–¥—ñ—Ç—å /leave_review.")
        bot.send_message(call.message.chat.id, "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.",
                         reply_markup=create_main_menu_button())
    elif call.data == "cancel_order":
        orders[call.message.chat.id] = {'order': {}, 'details': {}}
        save_orders()
        bot.send_message(call.message.chat.id, "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–µ.")
        bot.send_message(call.message.chat.id, "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.",
                         reply_markup=create_main_menu_button())
    elif call.data == "view_status":
        order_id = orders[call.message.chat.id]['details'].get('order_id')
        status = orders[call.message.chat.id]['details'].get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        if order_id:
            bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (ID: {order_id}): {status}")
        else:
            bot.send_message(call.message.chat.id, "–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    elif call.data == "main_menu":
        send_main_menu(call.message)

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

@bot.message_handler(func=lambda message: message.text == "üìã –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
def check_order_status(message):
    if message.chat.id in orders and orders[message.chat.id]['details']:
        order_id = orders[message.chat.id]['details'].get('order_id')
        status = orders[message.chat.id]['details'].get('status', '–°—Ç–∞—Ç—É—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        if order_id:
            bot.send_message(message.chat.id, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (ID: {order_id}): {status}")
        else:
            bot.send_message(message.chat.id, "–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å")
def about_us(message):
    about_text = "–ú–∏ - –≤–∞—à –Ω–∞–π–∫—Ä–∞—â–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ —Å–º–∞—á–Ω–æ—ó —ó–∂—ñ! –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è, –≤–∏ –Ω–∞—Å –ø–æ–ª—é–±–∏—Ç–µ."
    bot.send_message(message.chat.id, about_text)

@bot.message_handler(commands=['leave_review'])
def request_review(message):
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –≤–∞—à –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, process_review)

def process_review(message):
    review = message.text.strip()
    if not review:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, process_review)
        return
    reviews[uuid.uuid4().hex] = {'user_id': message.chat.id, 'review': review}
    save_reviews()
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!")

bot.polling()
